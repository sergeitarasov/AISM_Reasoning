asim.instances()
asim.instances()
asim
aism.instances()
aism
owl.Thing.instances()
Thing.instances()
list(onto.classes())
list(aism.classes())
aism
aism.classes()
list(aism.classes())
list(aism.individuals())
ontt=aism
list(ontt.individuals())
onto=aism
aism.individuals()
ind=list(aism.individuals())
for i in ind:
print(i)
def remove_all_individ(aism):
ind=list(aism.individuals())
for i in ind:
destroy_entity(i)
#print(i)
# remove al individuals from ontology
def remove_all_individ(aism):
ind=list(aism.individuals())
for i in ind:
destroy_entity(i)
#print(i)
list(aism.individuals())
def remove_all_individ(aism):
ind=list(aism.individuals())
for i in ind:
destroy_entity(i)
#print(i)
list(aism.individuals())
destroy_entity(obo.IAO_0000103)
destroy_entity(obo.sp1_sclerite_2,)
destroy_entity(obo.sp1_sclerite_2)
destroy_entity(obo.sp1_sclerite_2)
destroy(obo.sp1_sclerite_2)
destroy_entity(sp1_sclerite_2)
list(aism.individuals())
obo.sp1_sclerite_2
print(obo.sp1_sclerite_2)
print(obo.sp1_tergite_9)
destroy_entity(obo.sp1_sclerite_2)
print(obo.sp1_tergite_9)
print(obo.sp1_tergite_9)
destroy_entity(obo.sp1_sclerite_2)
print(obo.sp1_tergite_9)
destroy_entity(sp1_sclerite_2)
print(obo.sp1_tergite_9)
destroy(obo.sp1_sclerite_2)
print(obo.sp1_tergite_9)
obo.sp1_tergite_9
obo.sp1_tergite_9
obo.sp1_tergite_9
print(obo.sp1_tergite_9)
dir(obo.sp1_tergite_9)
destroy_entity(obo.sp1_sclerite_2)
print(obo.sp1_tergite_9)
dir(obo.sp1_tergite_9)
destroy_entity()
help(destroy_entity)
help(destroy_entity())
destroy_entity(obo.sp1_sclerite_2)
destroy_entity(sp1_sclerite_2)
obo.sp1_sclerite_2.destroy()
obo.sp1_sclerite_2.destroy
obo.sp1_sclerite_2.destroy_entity
obo.sp1_sclerite_2
destroy_entity('obo.sp1_sclerite_2')
owlready2.destroy_entity(obo.sp1_sclerite_2)
list(aism.classes())
print(owlready2.__version__)
pip showowlready2
pip show owlready2
conda list
reticulate::repl_python()
setwd("~/Documents/My_papers/AISM/Cercus_reasoning")
setwd("~/Documents/My_papers/AISM/Cercus_reasoning")
library(reticulate)
library(dplyr)
source("make_individuals_Functions.R")
py_run_file(file="onto_Functions.py", local = FALSE, convert = FALSE)
reticulate::repl_python()
# read in ontology
py_run_file(file="read_ontology.py", local = FALSE, convert = FALSE)
reticulate::repl_python()
